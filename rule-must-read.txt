Tech sử dụng
1. Frontend Framework
•	Next.js 15
2. Ngôn ngữ & Build
•	TypeScript
3. Styling & UI
•	Tailwind CSS 4
•	Thư viện andt

Cấu trúc thư mục:
app/               # Next.js App Router
 └── layout.tsx
 └── page.tsx      # Trang home
components/
 ├── common/       # UI component thuần (pure), không chứa logic gọi API
 │    ├── Button.tsx
 │    ├── Card.tsx
 │    └── ...
 ├── layout/       # Chứa UI lặp lại giữa các trang (Header, Footer, Sidebar)
 │    ├── Header.tsx
 │    ├── Footer.tsx
 │    └── ...
 ├── sections/     # Các component chứa UI + logic riêng cho 1 page/section
 │    ├── HomeHero.tsx
 │    ├── PostList.tsx
 │    └── ...
 └── ui/           # Thư viện shadcn UI (không sửa code gốc)
      ├── button.tsx
      ├── input.tsx
      └── ...actions/           # Chứa các action để tương tác với API
 ├── userActions.ts
 └── postActions.ts
types/            # Chứa các type và interface ( IUSER v.v. ), đặt tên file để noun.d.ts
 └── user.d.ts
hooks/            # Chứa các custom hook dùng để tái sử dụng logic với hooks của React VD: isMobile 
 └── useUser.ts

lib/                   #Mục đích: chứa các hàm tiện ích dùng lại nhiều nơi, như formatDate, cn(),fetcher
Ví dụ:
lib/utils.ts     # Search debounce
lib/formatter.ts # formatDate

constants/           # chứa các giá trị hằng số như roles, API endpoint, message lỗi, v.v.
Ví dụ:
constants/roles.ts
constants/api.ts

Git Workflow  

Trước khi bắt đầu: tìm hiểu cách Git và branch hoạt động nếu đây là khái niệm mới.
Quy tắc branch:

  * Mỗi người code trên 1 nhánh riêng, không code trực tiếp trên `master`.
  * Đặt tên nhánh theo feature đang làm.
  * Ví dụ: `feature/dang-ky`, `feature/dang-nhap`
Quy trình làm việc:

 1. Pull `master` mới nhất trước khi code:

     ```bash
     git pull origin master # lấy code mới nhất từ remote
     ```
  2. Tạo và chuyển sang nhánh feature của mình:

     ```bash
     git checkout -b feature/dang-ky # ví dụ: feature/dang-ky
     ```
  3. Code xong → add và commit:

     ```bash
     git add . # thêm tất cả file đã thay đổi
     git commit -m "Hoàn thành chức năng đăng ký" # commit code
     ```
  4. Push code lên remote branch:

     ```bash
     git push origin feature/dang-ky # ví dụ: feature/dang-ky
     ```
  5. Lên GitHub → tạo Pull Request để merge vào `master`.



Page Component (trong app/)
Vị trí: app/[route]/page.tsx  #entry point của một trang.
Rule:
-	Không viết quá nhiều UI trực tiếp (useState, useEffect), chỉ dùng để import các component con các component con mới đc chứa: useState, useEffect…
-	Không gọi API trực tiếp trong page.tsx bằng fetch (trừ khi cần SSR), thay vào đó gọi qua actions.
-	Mỗi section trong trang → tách ra component riêng (components/sections/...).


Notes:
- 1 file phải dưới 200 line, nếu quá phải tách component
- Tải extension prettier, default formatter prettier, ctrl + S sẽ tự format code
- Muốn format code tất cả file thì: " npx prettier --write . "
- Muốn tải thêm các thư viện mới thì hãy hỏi trước vì sẽ ảnh hưởng đến hiệu năng app
- Tất cả các component phải có phần mở rộng là .tsx
- Hạn chế code file css thuần nhất có thể, code full tailwind
- color phải dùng theo theme trong file index.css ví dụ: text-primary, secondary trong file index.css

Đặt tên:
  + Đặt tên interface là I + tên Đối Tượng ( ví dụ IUser, IPost v.v. )
  + Đặt tên type là T + tên Đối Tượng + .ts ( ví dụ TUser.ts, TPost.ts v.v. )
  + function trong actions thì đặt tên là verb + noun ( ví dụ getUser, createPost v.v. )
  + Các component thì đặt tên theo chức năng của nó ( ví dụ Hero, Footer v.v. )
  + Các function trong component thì đặt tên handle + verb ( ví dụ handleClick, handleSubmit v.v. )